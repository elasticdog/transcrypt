#!/usr/bin/env bash

#
# transcrypt - https://github.com/elasticdog/transcrypt
#
# A script to configure transparent encryption of sensitive files stored in
# a Git repository. It utilizes OpenSSL's symmetric cipher routines and follows
# the gitattributes(5) man page regarding the use of filters.
#
# Copyright (c) 2014 Aaron Bull Schaefer <aaron@elasticdog.com>
# This source code is provided under the terms of the MIT License
# that can be be found in the LICENSE file.
#

##### Constants

# the release version of this script
readonly VERSION='0.9.6'

# the default cipher to utilize
readonly DEFAULT_CIPHER='aes-256-cbc'

# the current git repository's top-level directory
readonly REPO=$(git rev-parse --show-toplevel 2> /dev/null)

# whether or not transcrypt is already configured
readonly CONFIGURED=$(git config --get --local transcrypt.version 2> /dev/null)

# whether or not a HEAD revision exists
readonly HEAD_EXISTS=$(git rev-parse --verify --quiet HEAD 2> /dev/null)

# regular expression used to test user input
readonly YES_REGEX='^[Yy]$'


##### Functions

# print a message to stderr
warn() {
	local fmt="$1"
	shift
	printf "transcrypt: $fmt\n" "$@" >&2
}

# print a message to stderr and exit with either
# the given status or that of the most recent command
die() {
	local st="$?"
	if [[ "$1" != *[^0-9]* ]]; then
		st="$1"
		shift
	fi
	warn "$@"
	exit "$st"
}

# verify that all requirements have been met
run_safety_checks() {
	# validate that we're in a git repository
	[[ $REPO ]] || die 'you are not currently in a git repository; did you forget to run "git init"?'

	# exit if transcrypt is not in the required state
	if [[ $requires_existing_config ]] && [[ ! $CONFIGURED ]]; then
		die 1 'the current repository is not configured'
	elif [[ ! $requires_existing_config ]] && [[ $CONFIGURED ]]; then
		die 1 'the current repository is already configured; see --display'
	fi

	# check for dependencies
	for cmd in {grep,openssl,sed}; do
		command -v $cmd > /dev/null || die "required command \"$cmd\" was not found"
	done

	# ensure the repository is clean (if it has a HEAD revision) so we can force
	# checkout files without the destruction of uncommitted changes
	if [[ $requires_clean_repo ]] && [[ $HEAD_EXISTS ]]; then
		# check if the repo is dirty
		if ! git diff-index --quiet HEAD; then
			die 1 'the repo is dirty; commit or stash your changes before running transcrypt'
		fi
	fi
}

# unset the cipher variable if it is not supported by openssl
validate_cipher() {
	local supported=$(openssl list-cipher-commands | grep --line-regexp "$cipher")
	if [[ ! $supported ]]; then
		if [[ $interactive ]]; then
			printf '"%s" is not a valid cipher; choose one of the following:\n\n' "$cipher"
			openssl list-cipher-commands | column -c 80
			printf '\n'
			unset cipher
		else
			die 1 '"%s" is not a valid cipher; see `openssl list-cipher-commands`' "$cipher"
		fi
	fi
}

# ensure we have a cipher to encrypt with
get_cipher() {
	while [[ ! $cipher ]]
	do
		local answer
		if [[ $interactive ]]; then
			printf 'Encrypt using which cipher? [%s] ' "$DEFAULT_CIPHER"
			read -r answer
		fi

		# use the default cipher if the user gave no answer;
		# otherwise verify the given cipher is supported by openssl
		if [[ ! $answer ]]; then
			cipher=$DEFAULT_CIPHER
		else
			cipher=$answer
			validate_cipher
		fi
	done
}

# ensure we have a password to encrypt with
get_password() {
	while [[ ! $password ]]
	do
		local answer
		if [[ $interactive ]]; then
			printf 'Generate a random password? [Y/n] '
			read -r -n 1 -s answer
			printf '\n'
		fi

		# generate a random password if the user answered yes;
		# otherwise prompt the user for a password
		if [[ $answer =~ $YES_REGEX ]] || [[ ! $answer ]]; then
			local password_length=30
			local random_base64=$(openssl rand -base64 $password_length)
			password=$random_base64
		else
			printf 'Password: '
			read -r password
			[[ ! $password ]] && printf 'no password was specified\n'
		fi
	done
}

# confirm the transcrypt configuration
confirm_configuration() {
	local answer

	printf '\nThe following configuration will be saved:\n\n'
	printf '  REPO:     %s\n' "$REPO"
	printf '  CIPHER:   %s\n' "$cipher"
	printf '  PASSWORD: %s\n\n' "$password"
	printf 'Does this look correct? [Y/n] '
	read -r -n 1 -s answer

	# exit if the user did not confirm
	if [[ $answer =~ $YES_REGEX ]] || [[ ! $answer ]]; then
		printf '\n\n'
	else
		printf '\n'
		die 1 'configuration has been aborted'
	fi
}

# confirm the rekey configuration
confirm_rekey() {
	local answer

	printf '\nThe following configuration will be saved:\n\n'
	printf '  REPO:     %s\n' "$REPO"
	printf '  CIPHER:   %s\n' "$cipher"
	printf '  PASSWORD: %s\n\n' "$password"
	printf 'You are about to re-encrypt all encrypted files using new credentials.\n'
	printf 'Once you do this, their historical diffs will no longer display in plain text.\n\n'
	printf 'Proceed with rekey? [y/N] '
	read -r answer

	# only rekey if the user explicitly confirmed
	if [[ $answer =~ $YES_REGEX ]]; then
		printf '\n'
	else
		die 1 'rekeying has been aborted'
	fi
}

# automatically stage rekeyed files in preparation for the user to commit them
stage_rekeyed_files() {
	local encrypted_files=$(git ls-crypt)
	if [[ $encrypted_files ]]; then
		# touch all encrypted files to prevent stale stat info
		cd "$REPO"
		touch $encrypted_files
		git update-index --add -- $encrypted_files

		printf '***  rekeyed files have been staged  ***\n'
		printf '*** COMMIT THESE CHANGES RIGHT AWAY! ***\n\n'
	fi
}

# save helper scripts under the repository's .git/ directory
save_helper_scripts() {
	[[ ! -d "$REPO/.git/crypt" ]] && mkdir "$REPO/.git/crypt"

	# The `decryption -> encryption` process on an unchanged file must be
	# deterministic for everything to work transparently. To do that, the same
	# salt must be used each time we encrypt the same file. An HMAC has been
	# proven to be a PRF, so we generate an HMAC-SHA256 for each decrypted file
	# (keyed with a combination of the filename and transcrypt password), and
	# then use the last 16 bytes of that HMAC for the file's unique salt.

	cat <<-'EOF' > "$REPO/.git/crypt/clean"
		#!/usr/bin/env bash
		filename=$1
		cipher=$(git config --get --local transcrypt.cipher)
		password=$(git config --get --local transcrypt.password)
		salt=$(openssl dgst -hmac "${filename}:${password}" -sha256 "$filename" | tail -c 16)
		ENC_PASS=$password openssl enc -$cipher -pass env:ENC_PASS -e -a -S $salt
	EOF

	cat <<-'EOF' > "$REPO/.git/crypt/smudge"
		#!/usr/bin/env bash
		cipher=$(git config --get --local transcrypt.cipher)
		password=$(git config --get --local transcrypt.password)
		ENC_PASS=$password openssl enc -$cipher -pass env:ENC_PASS -d -a 2> /dev/null
	EOF

	cat <<-'EOF' > "$REPO/.git/crypt/textconv"
		#!/usr/bin/env bash
		filename=$1
		cipher=$(git config --get --local transcrypt.cipher)
		password=$(git config --get --local transcrypt.password)
		ENC_PASS=$password openssl enc -$cipher -pass env:ENC_PASS -d -a -in "$filename" 2> /dev/null || cat $filename
	EOF

	# make scripts executable
	for script in {clean,smudge,textconv}; do
		chmod 0755 "$REPO/.git/crypt/$script"
	done
}

# write the configuration to the repository's .git/config
save_configuration() {
	save_helper_scripts

	# write the encryption info
	git config transcrypt.version "$VERSION"
	git config transcrypt.cipher "$cipher"
	git config transcrypt.password "$password"

	# write the filter settings
	git config filter.crypt.clean '"$(git rev-parse --show-toplevel)"/.git/crypt/clean %f'
	git config filter.crypt.smudge '"$(git rev-parse --show-toplevel)"/.git/crypt/smudge'
	git config diff.crypt.textconv '"$(git rev-parse --show-toplevel)"/.git/crypt/textconv'
	git config merge.renormalize 'true'

	# add a git alias for listing encrypted files
	git config alias.ls-crypt "!git ls-files | git check-attr --stdin filter | awk 'BEGIN { FS = \":\" }; /crypt$/{ print \$1 }'"
}

# display the current configuration settings
display_configuration() {
	local current_cipher=$(git config --get --local transcrypt.cipher)
	local current_password=$(git config --get --local transcrypt.password)
	local escaped_password=${current_password//\'/\'\\\'\'}

	printf 'The current repository was configured using transcrypt version %s\n' "$CONFIGURED"
	printf 'and has the following configuration:\n\n'
	printf '  CIPHER:   %s\n' "$current_cipher"
	printf '  PASSWORD: %s\n\n' "$current_password"
	printf 'Copy and paste the following command to initialize a cloned repository:\n\n'
	printf "  transcrypt -c %s -p '%s'\n" "$current_cipher" "$escaped_password"
}

# remove transcrypt-related settings from the repository's .git/config
clean_gitconfig() {
	git config --remove-section transcrypt
	git config --remove-section filter.crypt
	git config --remove-section diff.crypt
	git config --unset merge.renormalize

	# remove the merge section if it's now empty
	local merge_values=$(git config --get-regex --local 'merge\..*')
	if [[ ! $merge_values ]]; then
		git config --remove-section merge
	fi
}

# force the checkout of any files with the crypt filter applied to them;
# this will decrypt existing encrypted files if you've just cloned a repository,
# or it will encrypt locally decrypted files if you've just flushed the credentials
force_checkout() {
	# make sure a HEAD revision exists
	if [[ $HEAD_EXISTS ]]; then
		# this would normally delete uncommitted changes in the working directory,
		# but we already made sure the repo was clean during the safety checks
		cd "$REPO"
		git ls-crypt | xargs rm
		git checkout --force HEAD -- $(git ls-crypt) > /dev/null
	fi
}

# remove the locally cached encryption credentials and
# re-encrypt any files that had been previously decrypted
flush_credentials() {
	local answer

	if [[ $interactive ]]; then
		printf 'You are about to flush the local credentials; make sure you have saved them elsewhere.\n'
		printf 'All previously decrypted files will revert to their encrypted form.\n\n'
		printf 'Proceed with credential flush? [y/N] '
		read -r answer
		printf '\n'
	else
		# although destructive, we should support the --yes option
		answer='y'
	fi

	# only flush if the user explicitly confirmed
	if [[ $answer =~ $YES_REGEX ]]; then
		clean_gitconfig

		# re-encrypt any files that had been previously decrypted
		force_checkout

		printf 'The local transcrypt credentials have been successfully flushed.\n'
	else
		die 1 'flushing of credentials has been aborted'
	fi
}

# remove all transcrypt configuration from the repository
uninstall_transcrypt() {
	local answer

	if [[ $interactive ]]; then
		printf 'You are about to remove all transcrypt configuration from your repository.\n'
		printf 'All previously encrypted files will remain decrypted in this working copy.\n\n'
		printf 'Proceed with uninstall? [y/N] '
		read -r answer
		printf '\n'
	else
		# although destructive, we should support the --yes option
		answer='y'
	fi

	# only uninstall if the user explicitly confirmed
	if [[ $answer =~ $YES_REGEX ]]; then
		clean_gitconfig

		# remove helper scripts
		for script in {clean,smudge,textconv}; do
			[[ -f "$REPO/.git/crypt/$script" ]] && rm "$REPO/.git/crypt/$script"
		done
		[[ -d "$REPO/.git/crypt" ]] && rmdir "$REPO/.git/crypt"

		# touch all encrypted files to prevent stale stat info
		local encrypted_files=$(git ls-crypt)
		if [[ $encrypted_files ]]; then
			cd "$REPO"
			touch $encrypted_files
		fi

		# remove the `git ls-crypt` alias
		git config --unset alias.ls-crypt

		# remove the alias section if it's now empty
		local alias_values=$(git config --get-regex --local 'alias\..*')
		if [[ ! $alias_values ]]; then
			git config --remove-section alias
		fi

		# remove any defined crypt patterns in .gitattributes
		case $OSTYPE in
			darwin*)
				sed -i '' '/filter=crypt diff=crypt[ \t]*$/d' "$REPO/.gitattributes"
				;;
			linux*)
				sed -i '/filter=crypt diff=crypt[ \t]*$/d' "$REPO/.gitattributes"
				;;
		esac

		printf 'The transcrypt configuration has been completely removed from the repository.\n'
	else
		die 1 'uninstallation has been aborted'
	fi
}

# list all of the currently encrypted files in the repository
list_files() {
	cd "$REPO"
	git ls-files | git check-attr --stdin filter | awk 'BEGIN { FS = ":" }; /crypt$/{ print $1 }'
}

# show the raw file as stored in the git commit object
show_raw_file() {
	if [[ ! -f "$show_file" ]]; then
		die 1 'the file "%s" does not exist' "$show_file"
	fi

	# ensure the file is currently being tracked
	local escaped_show_file=${show_file//\//\\\/}
	if $(git ls-files --others -- "$show_file" | awk "/$escaped_show_file/{ exit 1 }"); then
		local file_path=$(git ls-tree --name-only --full-name HEAD "$show_file")
		git show HEAD:"$file_path" --no-textconv
	else
		die 1 'the file "%s" is not currently being tracked by git' "$show_file"
	fi
}

# print this script's usage message to stderr
usage() {
	cat <<-EOF >&2
	usage: transcrypt [-c CIPHER] [-p PASSWORD] [-y] [-d] [-r] [-f] [-u] [-v] [-h]
	EOF
}

# print this script's help message to stdout
help() {
	cat <<-EOF

	NAME
	     transcrypt -- transparently encrypt files within a git repository

	SYNOPSIS
	     transcrypt [options...]

	DESCRIPTION

	     transcrypt  will  configure a Git repository to support the transparent
	     encryption/decryption of files by utilizing OpenSSL's symmetric  cipher
	     routines  and  Git's  built-in clean/smudge filters. It will also add a
	     Git alias "ls-crypt" to list all transparently encrypted  files  within
	     the repository.

	     The  transcrypt  source  code  and full documentation may be downloaded
	     from https://github.com/elasticdog/transcrypt.

	OPTIONS
	     -c, --cipher=CIPHER
	            the symmetric cipher to utilize for encryption;
	            defaults to aes-256-cbc

	     -p, --password=PASSWORD
	            the password to derive the key from;
	            defaults to 30 random base64 characters

	     -y, --yes
	            assume yes and accept defaults for non-specified options

	     -d, --display
	            display the current repository's cipher and password

	     -r, --rekey
	            re-encrypt all encrypted files using new credentials

	     -f, --flush-credentials
	            remove the locally cached encryption credentials and  re-encrypt
	            any files that had been previously decrypted

	     -F, --force
	            ignore whether the git directory is clean, proceed with the
	            possibility that uncommitted changes are overwritten

	     -u, --uninstall
	            remove  all  transcrypt  configuration  from  the repository and
	            leave files in the current working copy decrypted

	     -l, --list
	            list all of the transparently encrypted files in the repository,
	            relative to the top-level directory

	     -s, --show-raw=FILE
	            show  the  raw file as stored in the git commit object; use this
	            to check if files are encrypted as expected

	     -v, --version
	            print the version information

	     -h, --help
	            view this help message

	EXAMPLES

	     To initialize a Git repository to support transparent encryption,  just
	     change  into  the  repo  and run the transcrypt script. transcrypt will
	     prompt you interactively for all required  information  if  the  corre-
	     sponding option flags were not given.

	         $ cd <path-to-your-repo>/
	         $ transcrypt

	     Once  a  repository has been configured with transcrypt, you can trans-
	     parently encrypt files by applying the "crypt" filter  and  diff  to  a
	     pattern in the top-level .gitattributes config. If that pattern matches
	     a file in your repository, the file  will  be  transparently  encrypted
	     once you stage and commit it:

	         $ echo 'sensitive_file  filter=crypt diff=crypt' >> .gitattributes
	         $ git add .gitattributes sensitive_file
	         $ git commit -m 'Add encrypted version of a sensitive file'

	     See the gitattributes(5) man page for more information.

	     If  you  have  just  cloned  a  repository  containing  files  that are
	     encrypted, you'll want to configure transcrypt with the same cipher and
	     password  as  the  origin  repository.  Once  transcrypt has stored the
	     matching  credentials,  it  will  force  a  checkout  of  any  existing
	     encrypted files in order to decrypt them.

	     If  the  origin  repository  has  just rekeyed, all clones should flush
	     their transcrypt credentials, fetch and merge the new  encrypted  files
	     via Git, and then re-configure transcrypt with the new credentials.

	AUTHOR
	     Aaron Bull Schaefer <aaron@elasticdog.com>

	SEE ALSO
	     enc(1), gitattributes(5)

	EOF
}


##### Main

# reset all variables that might be set
cipher=''
password=''
interactive='true'
display_config=''
rekey=''
flush_creds=''
uninstall=''
show_file=''

# used to bypass certain safety checks
requires_existing_config=''
requires_clean_repo='true'

# parse command line options
while [[ "$1" != '' ]]
do
	case $1 in
		-c | --cipher)
			cipher=$2
			shift
			;;
		--cipher=*)
			cipher=${1#*=}
			;;
		-p | --password)
			password=$2
			shift
			;;
		--password=*)
			password=${1#*=}
			;;
		-y | --yes)
			unset interactive
			;;
		-d | --display)
			display_config='true'
			requires_existing_config='true'
			unset requires_clean_repo
			;;
		-r | --rekey)
			rekey='true'
			requires_existing_config='true'
			;;
		-f | --flush-credentials)
			flush_creds='true'
			requires_existing_config='true'
			;;
		-F | --force)
			unset requires_clean_repo
			;;
		-u | --uninstall)
			uninstall='true'
			requires_existing_config='true'
			unset requires_clean_repo
			;;
		-l | --list)
			list_files
			exit 0
			;;
		-s | --show-raw)
			show_file=$2
			show_raw_file
			exit 0
			;;
		--show-raw=*)
			show_file=${1#*=}
			show_raw_file
			exit 0
			;;
		-v | --version)
			printf "transcrypt $VERSION\n"
			exit 0
			;;
		-h | --help | -\?)
			help
			exit 0
			;;
		--*)
			warn "unknown option -- ${1#--}"
			usage
			exit 1
			;;
		*)
			warn "unknown option -- ${1#-}"
			usage
			exit 1
			;;
	esac
	shift
done

# always run our safety checks
run_safety_checks

# in order to keep behavior consistent no matter what order the options were
# specified in, we must run these here rather than in the case statement above
if [[ $uninstall ]]; then
	uninstall_transcrypt
	exit 0
elif [[ $display_config ]] && [[ $flush_creds ]]; then
	display_configuration
	printf '\n'
	flush_credentials
	exit 0
elif [[ $display_config ]]; then
	display_configuration
	exit 0
elif [[ $flush_creds ]]; then
	flush_credentials
	exit 0
elif [[ $cipher ]]; then
	validate_cipher
fi

# perform function calls to configure transcrypt
get_cipher
get_password

if [[ $rekey ]] && [[ $interactive ]]; then
	confirm_rekey
elif [[ $interactive ]]; then
	confirm_configuration
fi

save_configuration

if [[ $rekey ]]; then
	stage_rekeyed_files
else
	force_checkout
fi

# ensure the git attributes file exists
if [[ ! -f "$REPO/.gitattributes" ]]; then
	printf '#pattern  filter=crypt diff=crypt\n' > "$REPO/.gitattributes"
fi

printf 'The repository has been successfully configured by transcrypt.\n'

exit 0
